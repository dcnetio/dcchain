
//! Autogenerated weights for `pallet_dc_node`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-13, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `beiniao-Z138`, CPU: `Intel(R) Core(TM) i7-10700 CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_dc_node
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output=./dc-frame/dc-node/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_example_basic.
pub trait WeightInfo {
	fn join_storage_node() -> Weight;
	fn submit_work_report(n: u32, m: u32, ) -> Weight;
	fn purchase_storage() -> Weight;
	fn add_request_peer_id_to_user() -> Weight;
	fn update_db_config() -> Weight;
	fn create_sub_account() -> Weight;
	fn unbind_sub_account() -> Weight;
	fn add_user_peer() -> Weight;
	fn remove_self_user_peer() -> Weight;
	fn remove_other_user_peer() -> Weight;
	fn apply_nft_account() -> Weight;
	fn transfer_nft_account() -> Weight;
	fn update_nft_account() -> Weight;
	fn add_file_info() -> Weight;
	fn add_file_peer() -> Weight;
	fn remove_self_file_peer() -> Weight;
	fn delete_file_info() -> Weight;
	fn add_log_to_thread_db() -> Weight;
	fn add_space_to_thread_db() -> Weight;
	fn report_file_miss() -> Weight;
	fn report_login_info_miss() -> Weight;
	fn report_tee_faking() -> Weight;
	fn verify_tee_faking() -> Weight;
	fn report_peer_offchain() -> Weight;
	fn report_peer_no_response() -> Weight;
	fn report_spam() -> Weight;
	fn new_theme() -> Weight;
	fn add_theme_comment_space() -> Weight;
	fn add_user_comment_space() -> Weight;
	fn report_malicious_comment() -> Weight;
	fn user_login(n: u32, ) -> Weight;
}

pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DcNode MaxStorageNodeSpace (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:1)
	// Storage: DcNode StartRewardBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:0 w:1)
	fn join_storage_node() -> Weight {
		// Minimum execution time: 42_476 nanoseconds.
		Weight::from_ref_time(43_148_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:1)
	// Storage: DcNode IntervalBlocksWorkReport (r:1 w:0)
	// Storage: DcNode Files (r:1 w:1)
	// Storage: DcNode WalletAccountStorage (r:11 w:10)
	// Storage: DcNode StartRewardBlockNumber (r:1 w:0)
	/// The range of component `n` is `[1, 10]`.
	/// The range of component `m` is `[1, 10]`.
	fn submit_work_report(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 143_194 nanoseconds.
		Weight::from_ref_time(62_483_597)
			// Standard Error: 14_290
			.saturating_add(Weight::from_ref_time(9_095_060).saturating_mul(n.into()))
			// Standard Error: 14_290
			.saturating_add(Weight::from_ref_time(7_710_291).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
	}
	// Storage: DcNode StoragePackages (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	// Storage: DcNode AppRewardPercent (r:1 w:0)
	// Storage: DcNode AppRewardTotal (r:1 w:1)
	// Storage: DcNode StorageRewardTotal (r:1 w:1)
	fn purchase_storage() -> Weight {
		// Minimum execution time: 78_374 nanoseconds.
		Weight::from_ref_time(92_112_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn add_request_peer_id_to_user() -> Weight {
		// Minimum execution time: 69_427 nanoseconds.
		Weight::from_ref_time(72_099_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn update_db_config() -> Weight {
		// Minimum execution time: 59_146 nanoseconds.
		Weight::from_ref_time(60_014_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: DcNode WalletAccountStorage (r:1 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn create_sub_account() -> Weight {
		// Minimum execution time: 94_538 nanoseconds.
		Weight::from_ref_time(95_582_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn unbind_sub_account() -> Weight {
		// Minimum execution time: 59_710 nanoseconds.
		Weight::from_ref_time(60_772_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	fn add_user_peer() -> Weight {
		// Minimum execution time: 41_846 nanoseconds.
		Weight::from_ref_time(42_496_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	fn remove_self_user_peer() -> Weight {
		// Minimum execution time: 42_473 nanoseconds.
		Weight::from_ref_time(43_548_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	fn remove_other_user_peer() -> Weight {
		// Minimum execution time: 31_446 nanoseconds.
		Weight::from_ref_time(31_882_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	// Storage: DcNode NftToWalletAccount (r:1 w:1)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn apply_nft_account() -> Weight {
		// Minimum execution time: 68_329 nanoseconds.
		Weight::from_ref_time(69_321_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:2 w:1)
	// Storage: DcNode NftToWalletAccount (r:1 w:1)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn transfer_nft_account() -> Weight {
		// Minimum execution time: 69_192 nanoseconds.
		Weight::from_ref_time(70_200_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	// Storage: DcNode NftToWalletAccount (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn update_nft_account() -> Weight {
		// Minimum execution time: 65_926 nanoseconds.
		Weight::from_ref_time(66_581_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	// Storage: DcNode Files (r:1 w:1)
	fn add_file_info() -> Weight {
		// Minimum execution time: 63_011 nanoseconds.
		Weight::from_ref_time(63_737_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode Files (r:1 w:1)
	fn add_file_peer() -> Weight {
		// Minimum execution time: 46_393 nanoseconds.
		Weight::from_ref_time(47_009_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode Files (r:1 w:1)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	fn remove_self_file_peer() -> Weight {
		// Minimum execution time: 51_726 nanoseconds.
		Weight::from_ref_time(63_095_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode Files (r:1 w:1)
	// Storage: DcNode WalletAccountStorage (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn delete_file_info() -> Weight {
		// Minimum execution time: 66_712 nanoseconds.
		Weight::from_ref_time(67_960_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode Files (r:1 w:1)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn add_log_to_thread_db() -> Weight {
		// Minimum execution time: 58_948 nanoseconds.
		Weight::from_ref_time(59_899_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode Files (r:1 w:1)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn add_space_to_thread_db() -> Weight {
		// Minimum execution time: 57_805 nanoseconds.
		Weight::from_ref_time(58_904_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode Files (r:1 w:1)
	fn report_file_miss() -> Weight {
		// Minimum execution time: 45_484 nanoseconds.
		Weight::from_ref_time(46_430_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	fn report_login_info_miss() -> Weight {
		// Minimum execution time: 34_353 nanoseconds.
		Weight::from_ref_time(34_906_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Storage: DcNode ReportsInEra (r:1 w:1)
	fn report_tee_faking() -> Weight {
		// Minimum execution time: 45_348 nanoseconds.
		Weight::from_ref_time(46_203_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:2 w:1)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Storage: DcNode ReportsInEra (r:1 w:1)
	// Storage: DcNode AbnormalReportNumber (r:1 w:0)
	// Storage: Staking Bonded (r:1 w:0)
	// Storage: Staking ActiveEra (r:1 w:0)
	// Storage: Staking UnappliedSlashes (r:1 w:1)
	// Storage: DcNode OnchainPeerNumber (r:1 w:1)
	// Storage: DcNode StashPeers (r:1 w:0)
	fn verify_tee_faking() -> Weight {
		// Minimum execution time: 103_027 nanoseconds.
		Weight::from_ref_time(114_739_000)
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:2 w:1)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Storage: DcNode ReportsInEra (r:1 w:1)
	// Storage: DcNode AbnormalReportNumber (r:1 w:0)
	// Storage: DcNode StartRewardBlockNumber (r:1 w:0)
	// Storage: DcNode OnchainPeerNumber (r:1 w:1)
	fn report_peer_offchain() -> Weight {
		// Minimum execution time: 67_314 nanoseconds.
		Weight::from_ref_time(67_857_000)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:2 w:1)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Storage: DcNode ReportsInEra (r:1 w:1)
	// Storage: DcNode AbnormalReportNumber (r:1 w:0)
	// Storage: DcNode StartRewardBlockNumber (r:1 w:0)
	// Storage: DcNode OnchainPeerNumber (r:1 w:1)
	fn report_peer_no_response() -> Weight {
		// Minimum execution time: 67_018 nanoseconds.
		Weight::from_ref_time(67_707_000)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: DcNode IntervalBlocksCanNotReport (r:1 w:0)
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:2 w:1)
	// Storage: DcNode FrozenReportSpamAmount (r:1 w:0)
	fn report_spam() -> Weight {
		// Minimum execution time: 68_573 nanoseconds.
		Weight::from_ref_time(73_655_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	// Storage: DcNode IntervalBlocksLogin (r:1 w:0)
	// Storage: DcNode IntervalBlocksReduceSpam (r:1 w:0)
	// Storage: DcNode IntervalBlocksReduceComment (r:1 w:0)
	// Storage: DcNode AppsAccountLoginTimes (r:1 w:1)
	// Storage: DcNode AccountOfApp (r:1 w:0)
	/// The range of component `n` is `[1, 1000]`.
	fn user_login(n: u32, ) -> Weight {
		// Minimum execution time: 59_472 nanoseconds.
		Weight::from_ref_time(42_400_594)
			// Standard Error: 7_633
			.saturating_add(Weight::from_ref_time(2_299_276).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	fn new_theme() -> Weight {
		// Minimum execution time: 48_717 nanoseconds.
		Weight::from_ref_time(49_381_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	fn add_theme_comment_space() -> Weight {
		// Minimum execution time: 48_648 nanoseconds.
		Weight::from_ref_time(49_346_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:1 w:1)
	// Storage: DcNode CommentReduceSpace (r:1 w:0)
	fn add_user_comment_space() -> Weight {
		// Minimum execution time: 52_238 nanoseconds.
		Weight::from_ref_time(53_029_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: DcNode IntervalBlocksCanNotReport (r:1 w:0)
	// Storage: DcNode ValidCallBlockNumber (r:1 w:0)
	// Storage: DcNode RequestAccountPeer (r:1 w:0)
	// Storage: DcNode Peers (r:1 w:0)
	// Storage: DcNode WalletAccountStorage (r:2 w:1)
	// Storage: DcNode FrozenReportCommentAmount (r:1 w:0)
	fn report_malicious_comment() -> Weight {
		// Minimum execution time: 55_857 nanoseconds.
		Weight::from_ref_time(56_402_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
